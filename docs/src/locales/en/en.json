{
	"Header": {
		"header_title": "Multiform validator",
		"header_home": "Home",
		"header_already_here": "You are already here (:",
		"header_go_home": "Go home",
		"header_buy_coffee": "buy me a coffee ?",
		"header_github": "My github",
		"header_docs": "Documentation",
		"header_info": "Info"
	},
	"Footer": {
		"Home": "Home",
    "Services": "Services",
    "About": "About",
    "Terms": "Terms",
    "Privacy Policy": "Privacy Policy",
		"CopyRightMsg": "Multiform validator Â© 2023 - Gabriel Logan"
	},
	"HomePage": {
		"Welcome": "Welcome to the multiform-validator website",
		"Intro": "Using my library, you can convert many lines of code into very few lines and as a result you have a cleaner, stronger and safer code, you will have several tools and functions that will do several form validations",
		"Hello": "Hello",
		"FollowThe": "Follow the",
		"Documentation": "Documentation",
		"ForMoreInfo": "For more information",
		"SeeTheGithubSourceCode": "See the github source",
		"SeeTheNpmPage": "See the npm page",
		"SeeThePypiPage": "See the pypi page",
		"HelpMsg": "You can also help the programmer by buying a coffee at the link below, thanks in advance (:"
	},
	"HomeLayout": {
		"Title": "Multiform Validator",
		"Description": "Multilingual library made for validation, various form fields, such as: email, telephone, password, cpf, cnpj, credit card, magic numbers for image mimetype validation and much more.",
		"Classification": "Validation Library",
		"Support me on Buy me a coffee": "Support me on Buy me a coffee!"
	},
	"About": {
		"about_title": "Hello, I'm Gabriel Logan",
		"about_intro": "I consider myself a versatile programmer with a passion for both front-end and back-end development. Crafting exceptional web experiences is what drives me, and I take immense pride in the work I produce.",
		"about_frontend": "As a front-end developer, I have a keen eye for user experience and interface design. I love transforming creative concepts into visually captivating and interactive web applications using HTML, CSS, and JavaScript. From seamless navigation to smooth animations, I pay attention to every detail to ensure that my front-end projects exude elegance and functionality.",
		"about_backend": "But my skills don't stop there. I am equally proficient in back-end development, with expertise in languages such as Python, Java, and JavaScript (Node.js). Building robust and secure web applications is my forte, as I understand the intricacies of server-side logic. My solutions are geared towards efficiency, reliability, and scalability, making sure that even during peak times, my applications deliver a smooth user experience.",
		"about_achievement": "One of my proudest achievements is the creation of a groundbreaking web page that simplifies and speeds up form validation. This ingenious solution is designed to help people and businesses streamline their form validation process. By leveraging my extensive knowledge of web development and incorporating cutting-edge technologies, my page offers a lightning-fast and SUPER efficient way to validate forms. Its user-friendly interface and intuitive functionalities make it an indispensable tool for professionals seeking to enhance their productivity and accuracy in data collection.",
		"about_creative": "Apart from my technical skills, I thrive as a creative problem solver. I love tackling challenges with an innovative mindset and am always on the lookout for ways to enhance the user experience. My ability to think outside the box and deliver inventive solutions sets me apart as a true leader in the field of web development.",
		"about_inspiration": "When I'm not engrossed in code, you might find me seeking inspiration in the world around me. Whether I'm exploring the outdoors, immersing myself in art and culture, or engaging in thought-provoking discussions, I draw from a diverse range of experiences that shape my approach to programming and my interactions with colleagues and clients.",
		"about_conclusion": "In conclusion, I am Gabriel Logan, a passionate programmer who seamlessly weaves front-end and back-end skills to create exceptional web experiences. My innovative mindset, attention to detail, and dedication to efficiency have led me to develop a groundbreaking page that I believe will make a significant impact on the world of form validation. As the digital landscape continues to evolve, I stand at the forefront, ready to embrace new challenges and make a difference through my exceptional work in web development."
	},
	"Info": {
		"info_title": "multiform-validator - Multi Library for Form Field Validation",
		"info_intro": "Introducing multiform-validator, a powerful Multi Library developed by Gabriel Logan. This versatile library is designed to validate numerous form fields, including email addresses, phone numbers, passwords, CPF (Brazilian individual taxpayer registry numbers), credit card numbers, and more.",
		"info_ensure": "With multiform-validator, you can ensure that the data submitted through your forms is accurate and secure. Whether you're building a registration form, checkout process, or any data input system, this library has got you covered.",
		"info_prebuilt_rules": "The multiform-validator library comes with an extensive set of pre-built validation rules and customizable options. You can easily integrate it into your web applications and enjoy the benefits of client-side validation, reducing the number of invalid form submissions and enhancing the overall user experience.",
		"info_backend": "You can also use the multiform-validator to do validations in your backend, it works for any type of form validation or functions that use javascript, python, so feel free to use it",
		"info_flexibility": "What sets multiform-validator apart is its flexibility and ease of use. You can effortlessly apply validation rules to different form fields by simply adding a few lines of JavaScript code. Additionally, the library provides informative error messages, guiding users on how to correct their inputs, thereby reducing frustration and form abandonment rates.",
		"info_performance": "Gabriel Logan takes pride in developing the multiform-validator library with a focus on performance, efficiency, and reliability. The library is optimized for various browsers, ensuring seamless compatibility for your diverse audience.",
		"info_conclusion": "So, if you're seeking a comprehensive solution for form field validation, look no further than multiform-validator. Embrace the power of this library, and rest assured that your data collection process will be streamlined, accurate, and secure."
	},
	"PrivacyPolices": {
		"privacy_title": "Privacy Policies - Your Data is Safe with Us",
		"privacy_intro": "At Gabriel Logan Web Services, we take your privacy seriously. We want to assure you that we do not collect any data on our website, and we do not use any data through the \"multiform-validator\" library. Your information remains entirely confidential, and your privacy is paramount to us.",
		"privacy_no_personal_data": "When you visit our website, rest assured that no personal data, such as your name, email address, or contact information, is gathered or stored. We believe in providing you with a safe and anonymous browsing experience.",
		"validator_local": "The \"multiform-validator\" library is designed to validate form fields on your web applications without accessing or transmitting any data to external servers. All validation occurs locally within your browser, ensuring that your sensitive information never leaves your device.",
		"validator_secure": "We understand the importance of data security, and that's why we have meticulously developed the \"multiform-validator\" library to be 100% secure. Your data remains under your control, and we do not have access to any information processed by the library.",
		"privacy_trust": "Your trust is valuable to us, and we want you to feel confident in using our services and the \"multiform-validator\" library. Our commitment to your privacy is unwavering, and we will continue to prioritize the security and protection of your data in all aspects of our work.",
		"privacy_questions": "If you have any questions or concerns about our privacy policies or the use of the \"multiform-validator\" library, please don't hesitate to contact us. We are here to address any inquiries and ensure your peace of mind.",
		"privacy_thanks": "Thank you for choosing Gabriel Logan Web Services. We look forward to providing you with exceptional solutions while safeguarding your privacy every step of the way."
	},
	"Terms": {
		"Terms and Conditions": "Terms and Conditions",
		"Welcome to Gabriel Logan Web Services. By using this website, you agree to the following terms and conditions:": "Welcome to Gabriel Logan Web Services. By using this website, you agree to the following terms and conditions:",
		"The content provided on this website is for general information purposes only, and we make no warranties or representations regarding its accuracy or completeness.": "The content provided on this website is for general information purposes only, and we make no warranties or representations regarding its accuracy or completeness.",
		"We use the \"multiform-validator\" library, licensed under the MIT License, to enhance form field validation. However, we are not responsible for its usage or any consequences resulting from third-party use of the library.": "We use the \"multiform-validator\" library, licensed under the MIT License, to enhance form field validation. However, we are not responsible for its usage or any consequences resulting from third-party use of the library.",
		"We do not collect any personal data through this website, and your privacy is important to us.": "We do not collect any personal data through this website, and your privacy is important to us.",
		"Unauthorized use of this website is strictly prohibited.": "Unauthorized use of this website is strictly prohibited.",
		"Your use of this website and any disputes arising are subject to the laws of [Your Country/Region].": "Your use of this website and any disputes arising are subject to the laws of [Your Country/Region].",
		"Thank you for visiting our website and using our services. If you have any questions or concerns, please donât hesitate to contact us.": "Thank you for visiting our website and using our services. If you have any questions or concerns, please donât hesitate to contact us."
	},
	"Manifest": {
		"Name": "Multiform Validator - Your Multilingual Validation Library",
		"ShortName": "Multiform Validator",
		"Description": "Multilingual library made for validation, various form fields, such as: email, telephone, password, cpf, cnpj, credit card, magic numbers for image mimetype validation and much more."
	},
	"NotFound": {
			"Msg": "This page could not be found.",
			"Status": "404"
	},
	"DocumentationLayout": {
		"Documentation": "Documentation",
		"Documentation for the Multiform Validator library.": "Documentation for the Multiform Validator library."
	},
	"DocumentationPage": {
		"doc_title": "Documentations Page",
		"doc_intro": "Welcome to the documentation page. Here you can find all the languages that we support and the documentation for each one of them.",
		"doc_subtitle": "Here's all the languages that we support",
		"doc_js_title": "JavaScript",
		"doc_js_text": "Here you can find the documentation for the JavaScript language.",
		"doc_py_title": "Python",
		"doc_py_text": "Here you can find the documentation for the Python language.",
		"doc_java_title": "Java",
		"doc_java_text": "Here you can find the documentation for the Java language.",
		"doc_java_coming": "In coming ..."
	},
	"SidebarWrapperJs": {
		"Documentation": "Documentation",
		"Home": "Home"
	},
	"DocumentationPython": {
    "Back to home": "Back to home",
    "Installation": "Installation",
    "Install the package using pip: ": "Install the package using pip: ",
    "Methods": "Methods",
    "All params with default values are optional.": "All params with default values are optional."
  },
	"DocumentationJs": {
		"Back to home page": "Back to home page",
		"Official documentation": "Official documentation",
		"Welcome Introduction Text": "Welcome to the main page of Multiform Validator! Here, you will find detailed documentation for various functions provided by Multiform Validator, a useful JavaScript library for data validation. Each function is designed to assist in validating different types of data, making your code more robust and secure. Multiform Validator consists of a series of specialized functions that allow you to validate various data types, such as emails, passwords, names, surnames, passport numbers, phone numbers, and more. Each function has configurable parameters and provides customizable error messages to suit your project's needs. On each documentation page, you will find a comprehensive description of the function, including its purpose, accepted parameters, and usage examples. Additionally, you will have access to details about default error messages and how to customize them to fit your application. By using Multiform Validator, you can ensure that user input in your forms is correct and compliant with the established rules. This validation is essential to prevent issues such as invalid entries, corrupted data, or security vulnerabilities. We are continuously working to enhance and expand Multiform Validator with new features and improvements to make it an even more powerful and flexible tool for your validation needs. We hope that these documentations prove to be helpful and simplify the usage of Multiform Validator in your projects. Feel free to explore the various available functions and do not hesitate to reach out to us if you have any questions or suggestions. Thank you for choosing Multiform Validator as your data validation tool, and we wish you success in your projects! Multiform Validator Team",
		"This npm package provides JavaScript functions to validate various forms fields.": "This npm package provides JavaScript functions to validate various forms fields.",
		"If you want to help me, you can buy me a coffee (:": "If you want to help me, you can buy me a coffee (:",
		"INFO: ": "INFO: ",
		"FirstInfoText": "All functions that have the name \"validate\" return an object with two properties, isValid: true | false and errorMsg: 'String with errors'",
		"SecondInfoText": "The remaining ones can return true|false|string|array, look at the doc for each one",
		"Feel free to find bugs Text Msg": "Feel free to find bugs and report them to me. Your feedback is highly appreciated. Hugs from Gabriel Logan!",
		"Example of use with CDN": "Example of use with CDN",
		"Installation": "Installation",
		"Data Validator": "Data Validator",
		"This package contains various modules for validating different types of data. Below are the available validation modules:": "This package contains various modules for validating different types of data. Below are the available validation modules:",
		"Available Validation Modules": "Available Validation Modules",
		"if you prefer, you can use importing as:": "if you prefer, you can use importing as:",
		"Feel free to explore msg": "Feel free to explore the various functions and experiment with different inputs to understand their behavior. If you encounter any issues or have suggestions, don't hesitate to reach out to me. Your feedback is valuable and helps improve the package. Happy coding!",
		"By - Gabriel Logan": "By - Gabriel Logan"
	},
	"DocumentationJsFunctions": {
		"Function Documentation": "Function Documentation",
		"The": "The",
		"function is used to validate a Brazilian CNPJ (National Registry of Legal Entities) number. It returns an object containing the": "function is used to validate a Brazilian CNPJ (National Registry of Legal Entities) number. It returns an object containing the",
		"and": "and",
		"properties, indicating whether the CNPJ is valid and, in case of an error, the corresponding error message.": "properties, indicating whether the CNPJ is valid and, in case of an error, the corresponding error message.",
		"Import": "Import",
		"The function can be imported using ES6 syntax from the \"multiform-validator\" package:": "The function can be imported using ES6 syntax from the \"multiform-validator\" package:",
		"Parameters": "Parameters",
		"The function takes two parameters:": "The function takes two parameters:",
		"The CNPJ number to validate.": "The CNPJ number to validate.",
		"optional array": "optional array",
		"A list of custom error messages. If not provided, it uses a default list of error messages.": "A list of custom error messages. If not provided, it uses a default list of error messages.",
		"Examples": "Examples",
		"Notes": "Notes",
		"If the function is called with an invalid value for the": "If the function is called with an invalid value for the",
		"parameter (non-array), or if an error occurs during the validation process, the function will return an object with": "parameter (non-array), or if an error occurs during the validation process, the function will return an object with",
		"set to": "set to",
		"containing the default error message 'Unknown error'.": "containing the default error message 'Unknown error'.",

		"function is used to validate a Brazilian CPF (Individual Taxpayer Identification) number. It returns an object containing the": "function is used to validate a Brazilian CPF (Individual Taxpayer Identification) number. It returns an object containing the",
		"properties, indicating whether the CPF is valid and, in case of an error, the corresponding error message.": "properties, indicating whether the CPF is valid and, in case of an error, the corresponding error message.",
		"There are two ways to import the function:": "There are two ways to import the function:",
		"Using": "Using",
		"require": "require",
		"The CPF number to be validated.": "The CPF number to be validated.",
		"function extracts email addresses from a given text. If the optional": "function extracts email addresses from a given text. If the optional",
		"parameter is set to": "parameter is set to",
		"it returns an array with all the email addresses found. Otherwise, it returns only the first email address found as a string.": "it returns an array with all the email addresses found. Otherwise, it returns only the first email address found as a string.",
		"Alternatively, you can import the function using CommonJS syntax with": "Alternatively, you can import the function using CommonJS syntax with",
		"The input text from which emails will be extracted.": "The input text from which emails will be extracted.",
		"the function will return an array with all the email addresses found. If set to": "the function will return an array with all the email addresses found. If set to",
		"or not provided, it will return only the first email address found as a string.": "or not provided, it will return only the first email address found as a string.",
		"(optional boolean | string[]) - Either a boolean value indicating whether to clean after default domains or an array of custom domains to clean after. Default is": "(optional boolean | string[]) - Either a boolean value indicating whether to clean after default domains or an array of custom domains to clean after. Default is",
		"which means it won't clean the email addresses after default domains ['.br', '.io', '.pt', '.us', '.org', '.com'];. If set to": "which means it won't clean the email addresses after default domains ['.br', '.io', '.pt', '.us', '.org', '.com'];. If set to",
		"it will clean after default domains. If set to an array of strings, it will clean after the specified custom domains.": "it will clean after default domains. If set to an array of strings, it will clean after the specified custom domains.",
		"(optional boolean) - If set to": "(optional boolean) - If set to",
		"the function will remove duplicate emails from the output list. If set to": "the function will remove duplicate emails from the output list. If set to",
		"or not provided, it will keep the duplicate emails in the output list.": "or not provided, it will keep the duplicate emails in the output list.",
		"If no email address is found in the input text, the function will return the string 'No email found'.": "If no email address is found in the input text, the function will return the string 'No email found'.",

		"function is used to identify the credit card flag based on the first digits of the card number. It returns the name of the card flag as a string.": "function is used to identify the credit card flag based on the first digits of the card number. It returns the name of the card flag as a string.",
		"The function takes one parameter:": "The function takes one parameter:",
		"The credit card number for which to identify the flag based on the first digits.": "The credit card number for which to identify the flag based on the first digits.",
		"Example": "Example",
		"The function expects the credit card number to be passed as a string. It uses the first digits of the card number to identify the card flag and returns the corresponding flag name as a string. If the card flag cannot be identified or the input is not a string, it returns 'Unknown'.": "The function expects the credit card number to be passed as a string. It uses the first digits of the card number to identify the card flag and returns the corresponding flag name as a string. If the card flag cannot be identified or the input is not a string, it returns 'Unknown'.",

		"function checks if the input string contains only ASCII characters. It returns": "function checks if the input string contains only ASCII characters. It returns",
		"if the string is composed of ASCII characters, and": "if the string is composed of ASCII characters, and",
		"otherwise.": "otherwise.",
		"The input string to check for ASCII characters.": "The input string to check for ASCII characters.",
		"The function expects the input value to be passed as a string. It checks each character of the string, and if any character has a character code greater than 127 (non-ASCII), the function returns": "The function expects the input value to be passed as a string. It checks each character of the string, and if any character has a character code greater than 127 (non-ASCII), the function returns",
		"If the input is not a string or an empty string, it throws an error.": "If the input is not a string or an empty string, it throws an error.",

		"function checks if the input string is a valid Base64 string. It returns": "function checks if the input string is a valid Base64 string. It returns",
		"if the string is a valid Base64, and": "if the string is a valid Base64, and",
		"The input string to check if it is a valid Base64 string.": "The input string to check if it is a valid Base64 string.",
		"The function expects the input value to be passed as a string. It checks if the string is a valid Base64 string using a regular expression. If the input is not a string or an empty string, it throws an error.": "The function expects the input value to be passed as a string. It checks if the string is a valid Base64 string using a regular expression. If the input is not a string or an empty string, it throws an error.",

		"function checks if the input string is a valid Brazilian ZIP Code (CEP). It returns": "function checks if the input string is a valid Brazilian ZIP Code (CEP). It returns",
		"if the CEP is valid, and": "if the CEP is valid, and",
		"The input string to check if it is a valid Brazilian ZIP Code (CEP).": "The input string to check if it is a valid Brazilian ZIP Code (CEP).",
		"The function expects the input to be passed as a string.": "The function expects the input to be passed as a string.",

		"function checks if the input string represents a valid credit card number using the Luhn algorithm. It returns": "function checks if the input string represents a valid credit card number using the Luhn algorithm. It returns",
		"if the credit card number is valid, and": "if the credit card number is valid, and",
		"The input string representing the credit card number to validate.": "The input string representing the credit card number to validate.",
		"The function expects the input value to be passed as a string representing a credit card number. It removes any non-digit characters and applies the Luhn algorithm to validate the credit card number. If the input is not a string, the function throws an error.": "The function expects the input value to be passed as a string representing a credit card number. It removes any non-digit characters and applies the Luhn algorithm to validate the credit card number. If the input is not a string, the function throws an error.",

		"function checks if the input string is a valid date.": "function checks if the input string is a valid date.",
		"The input string representing the date": "The input string representing the date",
		"The function expects the input value to be passed as a string.": "The function expects the input value to be passed as a string.",

		"function checks if the input string or number represents a valid decimal number. It returns": "function checks if the input string or number represents a valid decimal number. It returns",
		"if the value is a valid decimal number and follows one of the supported formats, and": "if the value is a valid decimal number and follows one of the supported formats, and",
		"The input value to check if it represents a valid decimal number.": "The input value to check if it represents a valid decimal number.",
		"The function expects the input value to be passed as a string or a number representing a decimal number. If the input is not a string or number, or an empty string, the function throws an error. It uses a regular expression to validate decimal numbers, supports both dot (.) and comma (,) as decimal separators, and checks for multiple decimal separators. Additionally, it performs checks for the negative sign to ensure it is only at the beginning of the value.": "The function expects the input value to be passed as a string or a number representing a decimal number. If the input is not a string or number, or an empty string, the function throws an error. It uses a regular expression to validate decimal numbers, supports both dot (.) and comma (,) as decimal separators, and checks for multiple decimal separators. Additionally, it performs checks for the negative sign to ensure it is only at the beginning of the value.",

		"function checks if the input string is a valid email address. It returns": "function checks if the input string is a valid email address. It returns",
		"if the email address is valid and follows the supported format, and": "if the email address is valid and follows the supported format, and",
		"This function just checks the syntax of the email to see if it's valid or not, if you need a stronger validation, use: ": "This function just checks the syntax of the email to see if it's valid or not, if you need a stronger validation, use: ",
		"The input string representing the email address to validate.": "The input string representing the email address to validate.",
		"The function expects the input email to be passed as a string. If the input is not a string, it will throw an error. If the email passed is an invalid email, it will return.": "The function expects the input email to be passed as a string. If the input is not a string, it will throw an error. If the email passed is an invalid email, it will return.",

		"function checks if the input string is empty or contains only whitespace characters. It returns": "function checks if the input string is empty or contains only whitespace characters. It returns",
		"if the input string is empty or consists of only whitespace characters, and": "if the input string is empty or consists of only whitespace characters, and",
		"The input string to check if it is empty or contains only whitespace characters.": "The input string to check if it is empty or contains only whitespace characters.",
		"The function expects the input value to be passed as a string. If the input is not a string, the function throws a TypeError. It removes any leading and trailing whitespace from the input string using the.": "The function expects the input value to be passed as a string. If the input is not a string, the function throws a TypeError. It removes any leading and trailing whitespace from the input string using the.",
		"trim()": "trim()",
		"method and checks if the resulting string is empty (i.e., has a length of 0). If the input string consists of only whitespace characters, the function also returns.": "method and checks if the resulting string is empty (i.e., has a length of 0). If the input string consists of only whitespace characters, the function also returns.",
		"as it considers such strings to be empty.": "as it considers such strings to be empty.",

		"function checks if the input string is a valid MAC address. It returns": "function checks if the input string is a valid MAC address. It returns",
		"if the MAC address is valid and follows the supported formats, and": "if the MAC address is valid and follows the supported formats, and",
		"The input string representing the MAC address to validate. The MAC address can be in the following formats: \"001A2B3C4D5E\", \"00:1A:2B:3C:4D:5E\", or \"00-1A-2B-3C-4D-5E\".": "The input string representing the MAC address to validate. The MAC address can be in the following formats: \"001A2B3C4D5E\", \"00:1A:2B:3C:4D:5E\", or \"00-1A-2B-3C-4D-5E\".",
		"The function expects the input MAC address to be passed as a string. If the input is not a string, the function throws a TypeError. It removes all non-alphanumeric characters from the input string using a regular expression and checks if the resulting string has a valid length (exactly 12 characters). Then, it uses another regular expression to verify if the cleaned MAC address matches the supported pattern. The supported pattern is a 12-character string consisting of hexadecimal digits (0-9, A-F, a-f), with optional separators (\":\", \"-\") between pairs of hexadecimal digits.": "The function expects the input MAC address to be passed as a string. If the input is not a string, the function throws a TypeError. It removes all non-alphanumeric characters from the input string using a regular expression and checks if the resulting string has a valid length (exactly 12 characters). Then, it uses another regular expression to verify if the cleaned MAC address matches the supported pattern. The supported pattern is a 12-character string consisting of hexadecimal digits (0-9, A-F, a-f), with optional separators (\":\", \"-\") between pairs of hexadecimal digits.",

		"function checks if the input string is a valid MD5 hash. It returns": "function checks if the input string is a valid MD5 hash. It returns",
		"if the input string is a valid MD5 hash and follows the supported format, and": "if the input string is a valid MD5 hash and follows the supported format, and",
		"The input string representing the MD5 hash to validate. The MD5 hash should be a 32-character string consisting of hexadecimal digits (0-9, A-F, a-f).": "The input string representing the MD5 hash to validate. The MD5 hash should be a 32-character string consisting of hexadecimal digits (0-9, A-F, a-f).",
		"The function expects the input MD5 hash to be passed as a string. If the input is not a string, the function throws a TypeError. It removes leading and trailing whitespace from the input string and checks if the resulting string has a valid length (exactly 32 characters). Then, it uses a regular expression to verify if the cleaned MD5 hash consists only of hexadecimal digits. Additionally, the function checks if the MD5 hash is not a known weak hash, such as \"d41d8cd98f00b204e9800998ecf8427e\". If any of the checks fail, the function returns false; otherwise, it returns true, indicating that the input string is a valid MD5 hash.": "The function expects the input MD5 hash to be passed as a string. If the input is not a string, the function throws a TypeError. It removes leading and trailing whitespace from the input string and checks if the resulting string has a valid length (exactly 32 characters). Then, it uses a regular expression to verify if the cleaned MD5 hash consists only of hexadecimal digits. Additionally, the function checks if the MD5 hash is not a known weak hash, such as \"d41d8cd98f00b204e9800998ecf8427e\". If any of the checks fail, the function returns false; otherwise, it returns true, indicating that the input string is a valid MD5 hash.",

		"function checks if the input value is a valid number. It returns": "function checks if the input value is a valid number. It returns",
		"if the value is a valid number, and": "if the value is a valid number, and",
		"The value to be checked if it represents a valid number.": "The value to be checked if it represents a valid number.",
		"The function checks if the input value is not null, undefined, or a boolean type. If any of these conditions are met, the function returns false since these values cannot represent valid numbers. For all other types, the function uses the.": "The function checks if the input value is not null, undefined, or a boolean type. If any of these conditions are met, the function returns false since these values cannot represent valid numbers. For all other types, the function uses the.",
		"function to convert the value to a floating-point number. If the conversion results in a valid number and the value is finite (not infinity or NaN), the function returns true, indicating that the input value is a valid number. Otherwise, it returns false.": "function to convert the value to a floating-point number. If the conversion results in a valid number and the value is finite (not infinity or NaN), the function returns true, indicating that the input value is a valid number. Otherwise, it returns false.",

		"function checks if the input value represents a valid port number. It returns": "function checks if the input value represents a valid port number. It returns",
		"if the value is a valid port number (within the range 1 to 65535), and": "if the value is a valid port number (within the range 1 to 65535), and",
		"The function takes one parameter that can be either a string or a number: ": "The function takes one parameter that can be either a string or a number: ",
		"The value to be checked if it represents a valid port number.": "The value to be checked if it represents a valid port number.",
		"The function first checks if the input value is either a string or a number. If the value is a string, it is converted to an integer using": "The function first checks if the input value is either a string or a number. If the value is a string, it is converted to an integer using",
		"If the conversion is successful (resulting in a valid integer), the function checks if the integer is within the valid port range (1 to 65535). If the value is within this range and it is an integer, the function returns true, indicating that the input value represents a valid port number. Otherwise, it returns false.": "If the conversion is successful (resulting in a valid integer), the function checks if the integer is within the valid port range (1 to 65535). If the value is within this range and it is an integer, the function returns true, indicating that the input value represents a valid port number. Otherwise, it returns false.",

		"function checks if the input value represents a valid postal code for supported countries. It returns": "function checks if the input value represents a valid postal code for supported countries. It returns",
		"true": "true",
		"if the value matches the postal code format for any of the supported countries, and": "if the value matches the postal code format for any of the supported countries, and",
		"false": "false",
		"The function takes one parameter, which must be a string representing the postal code to be checked.": "The function takes one parameter, which must be a string representing the postal code to be checked.",
		"postalCode": "postalCode",
		"The postal code to be checked for validity.": "The postal code to be checked for validity.",
		"Supported Countries": "Supported Countries",
		"The function supports postal codes for the following countries:": "The function supports postal codes for the following countries:",
		"United States of America": "United States of America",
		"Canada": "Canada",
		"United Kingdom": "United Kingdom",
		"France": "France",
		"Netherlands": "Netherlands",
		"Japan": "Japan",
		"Spain": "Spain",
		"South Africa": "South Africa",
		"Germany": "Germany",
		"Switzerland": "Switzerland",
		"Brazil": "Brazil",
		"Italy": "Italy",
		"The function uses regular expressions to check the input postal code against supported 'countries' postal code formats. It returns": "The function uses regular expressions to check the input postal code against supported 'countries' postal code formats. It returns",
		"if the input value matches any of the supported postal code formats, and": "if the input value matches any of the supported postal code formats, and",

		"if the value matches any of these formats, and": "if the value matches any of these formats, and",
		"The function takes one parameter, which must be a string representing the time to be checked.": "The function takes one parameter, which must be a string representing the time to be checked.",
		"The function uses a regular expression to check if the input time string matches any of the supported time formats. It returns": "The function uses a regular expression to check if the input time string matches any of the supported time formats. It returns",
		"if the input value matches any of the supported formats, and": "if the input value matches any of the supported formats, and",

		"How to use the isValidAudio function": "How to use the isValidAudio function",
		"function is used to check whether an audio file is valid or not. It accepts a Buffer as an argument.": "function is used to check whether an audio file is valid or not. It accepts a Buffer as an argument.",
		"Types that are validated": "Types that are validated",
		"You can also pass an options object as a second argument to exclude a specific type.": "You can also pass an options object as a second argument to exclude a specific type.",

		"How to use the isValidImage function": "How to use the isValidImage function",
		"function is used to check whether an image file is valid or not. It accepts a Buffer as an argument.": "function is used to check whether an image file is valid or not. It accepts a Buffer as an argument.",
		"Passing options to the": "Passing options to the",
		"Example Usage with Nestjs and Multer": "Example Usage with Nestjs and Multer",
		"In this example it only allocates 4 bytes for performance reasons, but you can pass the entire file.": "In this example it only allocates 4 bytes for performance reasons, but you can pass the entire file.",
		"First, import the": "First, import the",
		"function from 'multiform-validator'. Then, define the path to the image you want to check. Call the": "function from 'multiform-validator'. Then, define the path to the image you want to check. Call the",
		"function with the image path as an argument. The function will return": "function with the image path as an argument. The function will return",
		"if the image is valid and": "if the image is valid and",
		"if it is not.": "if it is not.",

		"How to use the isValidPdf function": "How to use the isValidPdf function",
		"function is used to check whether an pdf file is valid or not. It accepts a Buffer as an argument.": "function is used to check whether an pdf file is valid or not. It accepts a Buffer as an argument.",

		"How to use the isValidTxt function": "How to use the isValidTxt function",
		"function is used to check whether an txt file is valid or not. It accepts a Buffer as an argument.": "function is used to check whether an txt file is valid or not. It accepts a Buffer as an argument.",

		"How to use the isValidVideo function": "How to use the isValidVideo function",
		"function is used to check whether an video file is valid or not. It accepts a Buffer as an argument.": "function is used to check whether an video file is valid or not. It accepts a Buffer as an argument.",

		"function evaluates the strength of a given password and returns the type of password strength as a string. The possible strength types are: \"veryWeak\", \"weak\", \"regular\", \"strong\", or \"veryStrong\", based on specific criteria.": "function evaluates the strength of a given password and returns the type of password strength as a string. The possible strength types are: \"veryWeak\", \"weak\", \"regular\", \"strong\", or \"veryStrong\", based on specific criteria.",
		"The function can be imported using ES6 syntax from the \"password-strength-tester\" package:": "The function can be imported using ES6 syntax from the \"password-strength-tester\" package:",
		"The function takes one parameter, which must be a string representing the password to be evaluated.": "The function takes one parameter, which must be a string representing the password to be evaluated.",
		"The password to be evaluated for strength.": "The password to be evaluated for strength.",
		"The function checks the length of the password and applies certain criteria to classify the password strength. The returned strength type is based on the following criteria:": "The function checks the length of the password and applies certain criteria to classify the password strength. The returned strength type is based on the following criteria:",
		"'veryWeak' - Password with less than 6 characters, consisting only of numbers": "'veryWeak' - Password with less than 6 characters, consisting only of numbers",
		"'weak' - Password with less than 6 characters, consisting of numbers and letters": "'weak' - Password with less than 6 characters, consisting of numbers and letters",
		"'weak' - Password that repeats the same character more than 3 times in a row and is less than 10 characters long": "'weak' - Password that repeats the same character more than 3 times in a row and is less than 10 characters long",
		"'weak' - Password between 5 and 8 characters, consisting only of numbers": "'weak' - Password between 5 and 8 characters, consisting only of numbers",
		"'regular' - Password between 9 and 12 characters": "'regular' - Password between 9 and 12 characters",
		"'regular' - Password greater than or equal to 6 and less than 8 characters, containing at least one number and one letter": "'regular' - Password greater than or equal to 6 and less than 8 characters, containing at least one number and one letter",
		"'regular' - Password greater than 10 and has characters that are repeated more than 5 times in sequence": "'regular' - Password greater than 10 and has characters that are repeated more than 5 times in sequence",
		"'strong' - Password between 13 and 16 characters": "'strong' - Password between 13 and 16 characters",
		"'strong' - Password with 8 or more characters, containing at least one uppercase letter, one number and one lowercase letter": "'strong' - Password with 8 or more characters, containing at least one uppercase letter, one number and one lowercase letter",
		"'veryStrong' - Password longer than 16 characters": "'veryStrong' - Password longer than 16 characters",
		"'veryStrong' - Password with 8 or more characters, containing at least one uppercase letter, one number, one special character and one lowercase letter": "'veryStrong' - Password with 8 or more characters, containing at least one uppercase letter, one number, one special character and one lowercase letter",

		"function is used to validate Brazilian phone numbers. It returns an object with two properties: \"isValid\" (boolean) and \"errorMsg\" (string). The \"errorMsg\" property will contain the error message if the phone number is invalid, or it will be null if the phone number is valid.": "function is used to validate Brazilian phone numbers. It returns an object with two properties: \"isValid\" (boolean) and \"errorMsg\" (string). The \"errorMsg\" property will contain the error message if the phone number is invalid, or it will be null if the phone number is valid.",
		"The Brazilian phone number to be validated.": "The Brazilian phone number to be validated.",
		"[optional] - An array of error messages to customize the response. If not provided, the function will use default error messages.": "[optional] - An array of error messages to customize the response. If not provided, the function will use default error messages.",
		"Default Error Messages": "Default Error Messages",
		"The default error messages are as follows:": "The default error messages are as follows:",

		"function is used to validate email addresses. It returns an object with two properties: \"isValid\" (boolean) and \"errorMsg\" (string). The \"errorMsg\" property will contain the error message if the email address is invalid, or it will be null if the email address is valid.": "function is used to validate email addresses. It returns an object with two properties: \"isValid\" (boolean) and \"errorMsg\" (string). The \"errorMsg\" property will contain the error message if the email address is invalid, or it will be null if the email address is valid.",
		"What is the difference between": "What is the difference between",
		"isEmail just does simple validations like checking if the string has the formatting of an email like several validators out there,": "isEmail just does simple validations like checking if the string has the formatting of an email like several validators out there,",
		"does not, it does complex validations and better than that, you can customize the validations passing the information in the parameters.": "does not, it does complex validations and better than that, you can customize the validations passing the information in the parameters.",
		"Function Signature": "Function Signature",
		"The email address to be validated.": "The email address to be validated.",
		"[optional] - The maximum length allowed for the email address. If not provided, the default value is 400.": "[optional] - The maximum length allowed for the email address. If not provided, the default value is 400.",
		"[optional] - The country code to check if the email ends with it. If not provided, no country code check will be performed.": "[optional] - The country code to check if the email ends with it. If not provided, no country code check will be performed.",
		"[optional] - This parameter determines whether to check for specific valid email domains or not. If set to": "[optional] - This parameter determines whether to check for specific valid email domains or not. If set to",
		"the function will use a default list of valid domains. If set to": "the function will use a default list of valid domains. If set to",
		"no domain check will be performed. Alternatively, you can pass an array of custom valid domains to perform the check against a specific list.": "no domain check will be performed. Alternatively, you can pass an array of custom valid domains to perform the check against a specific list.",
		"Default list of valid domains": "Default list of valid domains",

		"Function is used to validate names. It returns an object with two properties: 'isValid' (boolean) and 'errorMsg' (string). The 'errorMsg' property will contain the error message if the name is invalid, or it will be null if the name is valid.": "Function is used to validate names. It returns an object with two properties: 'isValid' (boolean) and 'errorMsg' (string). The 'errorMsg' property will contain the error message if the name is invalid, or it will be null if the name is valid.",
		"The name to be validated.": "The name to be validated.",
		"[optional] The minimum length allowed for the name. Default value: 1.": "[optional] The minimum length allowed for the name. Default value: 1.",
		"[optional] The maximum length allowed for the name. Default value: 20.": "[optional] The maximum length allowed for the name. Default value: 20.",

		"function is used to validate passport numbers. It returns an object with two properties: 'isValid' (boolean) and 'country' (string). The 'isValid' property will be true if the passport number matches the supported formats, and 'country' property will indicate the country associated with the passport number. If the passport number does not match any supported format, 'isValid' will be false, and 'country' will be null.": "function is used to validate passport numbers. It returns an object with two properties: 'isValid' (boolean) and 'country' (string). The 'isValid' property will be true if the passport number matches the supported formats, and 'country' property will indicate the country associated with the passport number. If the passport number does not match any supported format, 'isValid' will be false, and 'country' will be null.",
		"The passport number to be validated.": "The passport number to be validated.",
		"Supported Passport Formats": "Supported Passport Formats",
		"United States: 9 digits (e.g., '123456789')": "United States: 9 digits (e.g., '123456789')",
		"United Kingdom: 2 uppercase letters followed by 6 digits (e.g., 'AB123456')": "United Kingdom: 2 uppercase letters followed by 6 digits (e.g., 'AB123456')",
		"Germany: 2 uppercase letters followed by 8 digits (e.g., 'AB12345678')": "Germany: 2 uppercase letters followed by 8 digits (e.g., 'AB12345678')",
		"Canada: 1 uppercase letter followed by 7 digits (e.g., 'A1234567')": "Canada: 1 uppercase letter followed by 7 digits (e.g., 'A1234567')",
		"Australia: 1 uppercase letter followed by 7 digits (e.g., 'A1234567')": "Australia: 1 uppercase letter followed by 7 digits (e.g., 'A1234567')",
		"Brazil: 9 digits (e.g., '123456789')": "Brazil: 9 digits (e.g., '123456789')",
		"France: 2 uppercase letters followed by 7 digits (e.g., 'AB1234567')": "France: 2 uppercase letters followed by 7 digits (e.g., 'AB1234567')",
		"Italy: 1 uppercase letter followed by 7 digits (e.g., 'A1234567')": "Italy: 1 uppercase letter followed by 7 digits (e.g., 'A1234567')",
		"India: 1 uppercase letter followed by 7 digits (e.g., 'A1234567')": "India: 1 uppercase letter followed by 7 digits (e.g., 'A1234567')",
		"China: 1 uppercase letter followed by 8 digits (e.g., 'A12345678')": "China: 1 uppercase letter followed by 8 digits (e.g., 'A12345678')",

		"function is used to validate passwords. It returns an object with two properties: \"isValid\" (boolean) and \"errorMsg\" (string). The \"isValid\" property will be true if the password meets the specified criteria, and \"errorMsg\" will contain the error message if the password is invalid, or it will be null if the password is valid.": "function is used to validate passwords. It returns an object with two properties: \"isValid\" (boolean) and \"errorMsg\" (string). The \"isValid\" property will be true if the password meets the specified criteria, and \"errorMsg\" will contain the error message if the password is invalid, or it will be null if the password is valid.",
		"The password to be validated.": "The password to be validated.",
		"[optional]": "[optional]",
		"The minimum length allowed for the password. Default value: 1.": "The minimum length allowed for the password. Default value: 1.",
		"The maximum length allowed for the password. Default value: Infinity.": "The maximum length allowed for the password. Default value: Infinity.",
		"[optional] - An object with the following optional properties:": "[optional] - An object with the following optional properties:",
		"Whether the password requires at least one uppercase letter. Default value: false.": "Whether the password requires at least one uppercase letter. Default value: false.",
		"Whether the password requires at least one special character": "Whether the password requires at least one special character",
		"Default value: false.": "Default value: false.",
		"Whether the password requires at least one number. Default value: false.": "Whether the password requires at least one number. Default value: false.",
		"Whether the password requires at least one letter. Default value: false.": "Whether the password requires at least one letter. Default value: false.",

		"Function is used to validate phone numbers. It returns an object with two properties: \"isValid\" (boolean) and \"errorMsg\" (string). The \"isValid\" property will be true if the phone number meets the specified criteria, and \"errorMsg\" will contain the error message if the phone number is invalid, or it will be null if the phone number is valid.": "Function is used to validate phone numbers. It returns an object with two properties: \"isValid\" (boolean) and \"errorMsg\" (string). The \"isValid\" property will be true if the phone number meets the specified criteria, and \"errorMsg\" will contain the error message if the phone number is invalid, or it will be null if the phone number is valid.",
		"The phone number to be validated.": "The phone number to be validated.",
		"An array of error messages to customize the response. If not provided, the function will use default error messages.": "An array of error messages to customize the response. If not provided, the function will use default error messages.",

		"function is used to validate surnames. It returns an object with two properties: 'isValid' (boolean) and 'errorMsg' (string). The 'isValid' property will be true if the surname meets the specified criteria, and 'errorMsg' will contain the error message if the surname is invalid, or it will be null if the surname is valid.": "function is used to validate surnames. It returns an object with two properties: 'isValid' (boolean) and 'errorMsg' (string). The 'isValid' property will be true if the surname meets the specified criteria, and 'errorMsg' will contain the error message if the surname is invalid, or it will be null if the surname is valid.",
		"The surname to be validated.": "The surname to be validated.",
		"The minimum length of the surname. Default is 1.": "The minimum length of the surname. Default is 1.",
		"The maximum length of the surname. Default is 25.": "The maximum length of the surname. Default is 25.",

		"The input textarea string to be validated.": "The input textarea string to be validated.",
		"A flag to determine if the textarea is required.": "A flag to determine if the textarea is required.",
		"The maximum allowed length for the textarea.": "The maximum allowed length for the textarea.",
		"An array of custom error messages for different validation conditions. The array should contain three elements corresponding to different error scenarios. If not provided, default error messages will be used. Default Error Messages:": "An array of custom error messages for different validation conditions. The array should contain three elements corresponding to different error scenarios. If not provided, default error messages will be used. Default Error Messages:",
		"Index 0: \"This textarea is too big\"": "Index 0: \"This textarea is too big\"",
		"Index 1: \"Can not be empty\"": "Index 1: \"Can not be empty\"",
		"Index 2: \"Unknown error\"": "Index 2: \"Unknown error\"",
		"Return Value": "Return Value",
		"The function returns an object with two properties:": "The function returns an object with two properties:",
		"Indicates if the textarea is valid based on the given criteria.": "Indicates if the textarea is valid based on the given criteria.",
		"Contains the corresponding error message, if any, based on the validation result.": "Contains the corresponding error message, if any, based on the validation result.",
		"This function is a text area validation utility that checks the validity of a given textarea string based on certain criteria.": "This function is a text area validation utility that checks the validity of a given textarea string based on certain criteria.",

		"The function is a text area validation utility that checks the validity of a given textarea string based on certain criteria.": "The function is a text area validation utility that checks the validity of a given textarea string based on certain criteria.",
		"The username to be validated.": "The username to be validated.",
		"[optional] - The minimum length of the username. Default is 1.": "[optional] - The minimum length of the username. Default is 1.",
		"[optional] - The maximum length of the username. Default is Infinity.": "[optional] - The maximum length of the username. Default is Infinity.",

		"function is used to validate US phone numbers. It supports various formats, including \"XXX-XXX-XXXX\", \"(XXX) XXX-XXXX\", and \"1 (XXX) XXX-XXXX\". It returns an object with two properties: \"isValid\" (boolean) and \"errorMsg\" (string). The \"isValid\" property will be true if the phone number is valid, and \"errorMsg\" will contain the error message if the phone number is invalid, or it will be null if the phone number is valid.": "function is used to validate US phone numbers. It supports various formats, including \"XXX-XXX-XXXX\", \"(XXX) XXX-XXXX\", and \"1 (XXX) XXX-XXXX\". It returns an object with two properties: \"isValid\" (boolean) and \"errorMsg\" (string). The \"isValid\" property will be true if the phone number is valid, and \"errorMsg\" will contain the error message if the phone number is invalid, or it will be null if the phone number is valid.",
		"The US phone number to be validated.": "The US phone number to be validated."
	}
}
