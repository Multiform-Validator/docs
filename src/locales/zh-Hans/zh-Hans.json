{
    "HomeLayout": {
        "Support me on Buy me a coffee": "支持我 给我买杯咖啡！",
        "Description": "用于验证的多语言库，各种表单字段，例如：电子邮件，电话，密码，CPF，CNPJ，信用卡，用于图像mimetype验证的幻数等等。",
        "Technology": "科技",
        "Opengraph description": "用于验证的多语言库，各种表单字段，例如：电子邮件，图像，CPF，CNPJ，信用卡，魔术号码等等。",
        "Classification": "验证库",
        "Title": "多形式验证器",
        "Opengraph title": "Multiform Validator - 您的多语言验证库"
    },
    "DocumentationJs": {
        "By - Gabriel Logan": "作者 - Gabriel Logan",
        "Installation": "安装",
        "This package contains various modules for validating different types of data. Below are the available validation modules:": "此软件包包含用于验证不同类型数据的各种模块。以下是可用的验证模块：",
        "INFO: ": "信息：",
        "Welcome Introduction Text": "欢迎访问Multiform Validator的主页！在这里，您将找到 Multiform Validator 提供的各种函数的详细文档，Multiform Validator 是一个用于数据验证的有用 JavaScript 库。每个函数都旨在帮助验证不同类型的数据，使您的代码更加可靠和安全。Multiform Validator 由一系列专用函数组成，允许您验证各种数据类型，例如电子邮件、密码、姓名、护照号码、电话号码等。每个功能都有可配置的参数，并提供可自定义的错误消息，以满足您项目的需求。在每个文档页面上，您都会找到该函数的全面描述，包括其用途、接受的参数和使用示例。此外，您还可以访问有关默认错误消息的详细信息，以及如何自定义它们以适合您的应用程序。通过使用多表单验证器，您可以确保用户在表单中的输入正确且符合既定规则。此验证对于防止无效条目、数据损坏或安全漏洞等问题至关重要。我们一直在努力增强和扩展 Multiform Validator，提供新功能和改进，使其成为满足您验证需求的更强大、更灵活的工具。我们希望这些文档对您有所帮助，并简化 Multiform Validator 在您的项目中的使用。请随时探索各种可用功能，如果您有任何问题或建议，请随时与我们联系。感谢您选择Multiform Validator作为您的数据验证工具，我们祝愿您的项目取得成功！多形式验证器团队",
        "if you prefer, you can use importing as:": "如果您愿意，可以将导入用作：",
        "Official documentation": "官方文档",
        "Example of use with CDN": "CDN使用示例",
        "Data Validator": "数据验证器",
        "FirstInfoText": "所有名称为“validate”的函数都返回一个具有两个属性的对象，isValid： true |false 和 errorMsg： '有错误的字符串'",
        "Feel free to find bugs Text Msg": "随意查找错误并将其报告给我。非常感谢您的反馈。加布里埃尔·洛根（Gabriel Logan）的拥抱！",
        "Back to home page": "返回首页",
        "If you want to help me, you can buy me a coffee (:": "如果你想帮我，你可以给我买杯咖啡（：",
        "SecondInfoText": "剩下的可以返回 true|false|string|array，查看每个的文档",
        "Available Validation Modules": "可用的验证模块",
        "Feel free to explore msg": "随意探索各种功能并尝试不同的输入以了解它们的行为。如果您遇到任何问题或有建议，请随时与我联系。您的反馈很有价值，有助于改进软件包。祝您编码愉快！",
        "This npm package provides JavaScript functions to validate various forms fields.": "此 npm 包提供 JavaScript 函数来验证各种表单字段。"
    },
    "DocumentationLayout": {
        "Documentation": "文档",
        "Documentation for the Multiform Validator library.": "多表单验证程序库的文档。"
    },
    "Terms": {
        "Terms and Conditions": "条款及细则",
        "Unauthorized use of this website is strictly prohibited.": "严禁未经授权使用本网站。",
        "Terms and Conditions of Multiform Validator library": "Multiform Validator 库的条款和条件",
        "Welcome to Gabriel Logan Web Services. By using this website, you agree to the following terms and conditions:": "欢迎使用 Gabriel Logan Web Services。使用本网站，即表示您同意以下条款和条件：",
        "We do not collect any personal data through this website, and your privacy is important to us.": "我们不会通过本网站收集任何个人数据，您的隐私对我们很重要。",
        "Your use of this website and any disputes arising are subject to the laws of [Your Country/Region].": "您对本网站的使用以及由此产生的任何争议均受 [您所在国家/地区] 的法律约束。",
        "The content provided on this website is for general information purposes only, and we make no warranties or representations regarding its accuracy or completeness.": "本网站提供的内容仅供一般参考之用，我们对其准确性或完整性不作任何保证或陈述。",
        "We use the \"multiform-validator\" library, licensed under the MIT License, to enhance form field validation. However, we are not responsible for its usage or any consequences resulting from third-party use of the library.": "我们使用在 MIT 许可证下许可的“multiform-validator”库来增强表单字段验证。但是，对于其使用或因第三方使用库而导致的任何后果，我们概不负责。",
        "Thank you for visiting our website and using our services. If you have any questions or concerns, please don’t hesitate to contact us.": "感谢您访问我们的网站并使用我们的服务。如果您有任何问题或疑虑，请随时与我们联系。"
    },
    "PrivacyPolices": {
        "privacy_questions": "如果您对我们的隐私政策或“multiform-validator”库的使用有任何疑问或疑虑，请随时与我们联系。我们在这里解决任何疑问，确保您高枕无忧。",
        "privacy_intro": "在Gabriel Logan Web Services，我们非常重视您的隐私。我们想向您保证，我们不会在我们的网站上收集任何数据，也不会通过“multiform-validator”库使用任何数据。您的信息将完全保密，您的隐私对我们来说至关重要。",
        "Privacy Policy": "隐私策略",
        "validator_local": "“multiform-validator”库旨在验证 Web 应用程序上的表单字段，而无需访问任何数据或将任何数据传输到外部服务器。所有验证都在浏览器中本地进行，确保您的敏感信息永远不会离开您的设备。",
        "privacy_thanks": "感谢您选择 Gabriel Logan Web Services。我们期待为您提供卓越的解决方案，同时保护您的隐私。",
        "privacy_title": "隐私政策 - 您的数据在我们这里是安全的",
        "validator_secure": "我们了解数据安全的重要性，这就是为什么我们精心开发了“多形式验证器”库，以确保 100% 安全。您的数据仍在您的控制之下，我们无权访问图书馆处理的任何信息。",
        "privacy_no_personal_data": "当您访问我们的网站时，请放心，不会收集或存储任何个人数据，例如您的姓名、电子邮件地址或联系信息。我们相信为您提供安全和匿名的浏览体验。",
        "privacy_trust": "您的信任对我们有很强的评价，我们希望您对使用我们的服务和“多表单验证器”库充满信心。我们对您的隐私的承诺是坚定不移的，我们将继续在我们工作的各个方面优先考虑您的数据的安全和保护。"
    },
    "Info": {
        "info_intro": "隆重推出 multiform-validator，这是一个由 Gabriel Logan 开发的功能强大的多库。这个多功能库旨在验证众多表单字段，包括电子邮件地址、电话号码、密码、CPF（巴西个人纳税人登记号）、信用卡号等。",
        "info_conclusion": "因此，如果您正在寻找用于表单字段验证的综合解决方案，那么 multiform-validator 就是您的不二之选。拥抱这个库的强大功能，请放心，您的数据收集过程将得到简化、准确和安全。",
        "info_title": "multiform-validator - 用于表单字段验证的多库",
        "info_performance": "Gabriel Logan 以开发多形式验证器库为荣，该库专注于性能、效率和可靠性。该库针对各种浏览器进行了优化，确保与不同受众的无缝兼容性。",
        "info_prebuilt_rules": "多形式验证器库附带了一组广泛的预构建验证规则和可自定义选项。您可以轻松地将其集成到您的 Web 应用程序中，并享受客户端验证的好处，减少无效表单提交的数量并增强整体用户体验。",
        "info_flexibility": "multiform-validator 的与众不同之处在于它的灵活性和易用性。只需添加几行 JavaScript 代码，即可轻松地将验证规则应用于不同的表单字段。此外，该库还提供信息丰富的错误消息，指导用户如何更正他们的输入，从而减少挫败感和表单放弃率。",
        "Info_Page": "信息页面",
        "info_backend": "您还可以使用 multiform-validator 在后端进行验证，它适用于任何类型的表单验证或使用 javascript、python 的函数，因此请随意使用它",
        "info_ensure": "使用 multiform-validator，您可以确保通过表单提交的数据准确且安全。无论您是在构建注册表单、结帐流程还是任何数据输入系统，此库都能满足您的需求。"
    },
    "Manifest": {
        "Description": "用于验证的多语言库，各种表单字段，例如：电子邮件，电话，密码，CPF，CNPJ，信用卡，用于图像mimetype验证的幻数等等。",
        "ShortName": "多形式验证器",
        "Name": "Multiform Validator - 您的多语言验证库"
    },
    "DocumentationPage": {
        "doc_java_title": "爪哇岛",
        "doc_py_text": "在这里，您可以找到 Python 语言的文档。",
        "doc_title": "“文档”页面",
        "doc_subtitle": "以下是我们支持的所有语言",
        "doc_java_text": "在这里，您可以找到 Java 语言的文档。",
        "doc_py_title": "蟒",
        "doc_js_title": "JavaScript的",
        "doc_intro": "欢迎来到文档页面。在这里，您可以找到我们支持的所有语言以及每种语言的文档。",
        "doc_js_text": "在这里，您可以找到 JavaScript 语言的文档。",
        "doc_java_coming": "在即将到来的..."
    },
    "About": {
        "about_backend": "但我的技能并不止于此。我同样精通后端开发，精通 Python、Java 和 JavaScript （Node.js） 等语言。构建健壮而安全的 Web 应用程序是我的强项，因为我了解服务器端逻辑的复杂性。我的解决方案旨在提高效率、可靠性和可扩展性，确保即使在高峰时段，我的应用程序也能提供流畅的用户体验。",
        "about_frontend": "作为一名前端开发人员，我对用户体验和界面设计有着敏锐的眼光。我喜欢使用 React 和 Nextjs 和打字稿将创意概念转化为视觉上引人入胜的交互式 Web 应用程序。从无缝导航到流畅的动画，我关注每一个细节，以确保我的前端项目散发着优雅和功能。",
        "About_Page": "关于页面",
        "about_achievement": "我最引以为豪的成就之一是创建了一个突破性的网页，简化并加快了表单验证。这个巧妙的解决方案旨在帮助个人和企业简化他们的表单验证过程。通过利用我在 Web 开发方面的广泛知识并结合尖端技术，我的页面提供了一种闪电般快速且超级高效的方式来验证表单。其用户友好的界面和直观的功能使其成为寻求提高数据收集效率和准确性的专业人士不可或缺的工具。",
        "about_title": "大家好，我是加布里埃尔·洛根",
        "about_inspiration": "当我不全神贯注于代码时，你可能会发现我在周围的世界中寻找灵感。无论我是探索户外活动，沉浸在艺术和文化中，还是参与发人深省的讨论，我都会从各种各样的经验中汲取灵感，这些经验塑造了我的编程方法以及与同事和客户的互动。",
        "About_Page_Description": "了解多形式验证器库的创建者 Gabriel Logan，了解他对 Web 开发、创新解决方案和对用户体验的奉献精神的热情。",
        "about_creative": "除了我的技术技能外，我还是一个创造性的问题解决者。我喜欢以创新的思维方式应对挑战，并且一直在寻找增强用户体验的方法。我跳出框框思考并提供创造性解决方案的能力使我成为 Web 开发领域的真正领导者。",
        "about_conclusion": "总之，我是 Gabriel Logan，一位充满激情的程序员，他将前端和后端技能无缝地编织在一起，以创造卓越的 Web 体验。我的创新思维、对细节的关注和对效率的奉献使我开发了一个开创性的页面，我相信它将对表单验证的世界产生重大影响。随着数字环境的不断发展，我站在最前沿，准备迎接新的挑战，并通过我在 Web 开发方面的出色工作有所作为。",
        "about_intro": "我认为自己是一个多才多艺的程序员，对前端和后端开发都充满热情。打造卓越的网络体验是我的动力，我为我的作品感到无比自豪。"
    },
    "HomePage": {
        "HelpMsg": "您也可以通过下面的链接购买咖啡来帮助程序员，提前致谢（：",
        "SeeThePypiPage": "查看 pypi 页面",
        "Intro": "使用我的库，您可以将许多代码转换为很少的行，因此您将拥有更干净、更强大、更安全的代码，您将拥有多种工具和功能，可以进行多种表单验证",
        "Hello": "你好",
        "Documentation": "文档",
        "FollowThe": "按照",
        "Welcome": "欢迎访问 multiform-validator 网站",
        "SeeTheGithubSourceCode": "查看 github 源代码",
        "ForMoreInfo": "更多信息",
        "SeeTheNpmPage": "查看 npm 页面"
    },
    "DocumentationJsFunctions": {
        "Alternatively, you can import the function using CommonJS syntax with": "或者，您可以使用 CommonJS 语法导入函数",
        "if the input value matches any of the supported postal code formats, and": "如果输入值与任何支持的邮政编码格式匹配，并且",
        "The function takes two parameters:": "该函数采用两个参数：",
        "containing the default error message 'Unknown error'.": "包含默认错误消息“未知错误”。",
        "If the conversion is successful (resulting in a valid integer), the function checks if the integer is within the valid port range (1 to 65535). If the value is within this range and it is an integer, the function returns true, indicating that the input value represents a valid port number. Otherwise, it returns false.": "如果转换成功（生成有效的整数），该函数将检查整数是否在有效端口范围（1 到 65535）内。如果该值在此范围内并且是整数，则该函数返回 true，指示输入值表示有效的端口号。否则，它将返回 false。",
        "The function can be imported using ES6 syntax from the \"multiform-validator\" package:": "可以使用 ES6 语法从“multiform-validator”包导入该函数：",
        "Brazil: 9 digits (e.g., '123456789')": "巴西：9 位数字（例如“123456789”）",
        "The US phone number to be validated.": "要验证的美国电话号码。",
        "if the input string is a valid MD5 hash and follows the supported format, and": "如果输入字符串是有效的 MD5 哈希并遵循支持的格式，并且",
        "parameter (non-array), or if an error occurs during the validation process, the function will return an object with": "参数（非数组），或者如果在验证过程中发生错误，该函数将返回一个对象",
        "Note:": "注意：",
        "function checks if the input string is a valid MAC address. It returns": "函数检查输入字符串是否为有效的 MAC 地址。它返回",
        "[optional] - The maximum length allowed for the email address. If not provided, the default value is 400.": "[可选] - 电子邮件地址允许的最大长度。如果未提供，则默认值为 400。",
        "Parameters": "参数",
        "The password to be validated.": "要验证的密码。",
        "This function just checks the syntax of the email to see if it's valid or not, if you need a stronger validation, use: ": "此函数仅检查电子邮件的语法以查看它是否有效，如果您需要更强的验证，请使用：",
        "function is used to validate Brazilian phone numbers. It returns an object with two properties: \"isValid\" (boolean) and \"errorMsg\" (string). The \"errorMsg\" property will contain the error message if the phone number is invalid, or it will be null if the phone number is valid.": "函数用于验证巴西电话号码。它返回一个具有两个属性的对象：“isValid”（布尔值）和“errorMsg”（字符串）。如果电话号码无效，则“errorMsg”属性将包含错误消息，如果电话号码有效，则该属性将为 null。",
        "if the input string is empty or consists of only whitespace characters, and": "如果输入字符串为空或仅包含空格字符，并且",
        "The CPF number to be validated.": "要验证的公积金号码。",
        "The function first checks if the input value is either a string or a number. If the value is a string, it is converted to an integer using": "该函数首先检查输入值是字符串还是数字。如果该值是字符串，则使用",
        "Supported Passport Formats": "支持的护照格式",
        "Default Error Messages": "默认错误消息",
        "optional array": "可选阵列",
        "Whether the password requires at least one number. Default value: false.": "密码是否至少需要一个数字。默认值：false。",
        "The function is a text area validation utility that checks the validity of a given textarea string based on certain criteria.": "该函数是一个文本区域验证实用程序，它根据特定条件检查给定文本区域字符串的有效性。",
        "The input string to check if it is a valid Brazilian ZIP Code (CEP).": "用于检查它是否为有效的巴西邮政编码 （CEP） 的输入字符串。",
        "The input text from which emails will be extracted.": "将从中提取电子邮件的输入文本。",
        "function is used to validate passport numbers. It returns an object with two properties: 'isValid' (boolean) and 'country' (string). The 'isValid' property will be true if the passport number matches the supported formats, and 'country' property will indicate the country associated with the passport number. If the passport number does not match any supported format, 'isValid' will be false, and 'country' will be null.": "函数用于验证护照号码。它返回一个具有两个属性的对象：“isValid”（布尔值）和“country”（字符串）。如果护照号码与支持的格式匹配，则“isValid”属性将为 true，“country”属性将指示与护照号码关联的国家/地区。如果护照号码与任何支持的格式不匹配，则“isValid”将为 false，“country”将为 null。",
        "How to use the isValidVideo function": "如何使用 isValidVideo 函数",
        "function is used to validate surnames. It returns an object with two properties: 'isValid' (boolean) and 'errorMsg' (string). The 'isValid' property will be true if the surname meets the specified criteria, and 'errorMsg' will contain the error message if the surname is invalid, or it will be null if the surname is valid.": "函数用于验证姓氏。它返回一个具有两个属性的对象：“isValid”（布尔值）和“errorMsg”（字符串）。如果姓氏满足指定的条件，则“isValid”属性将为 true，如果姓氏无效，则“errorMsg”将包含错误消息，如果姓氏有效，则该属性将为 null。",
        "The surname to be validated.": "要验证的姓氏。",
        "Contains the corresponding error message, if any, based on the validation result.": "包含基于验证结果的相应错误消息（如果有）。",
        "You can also pass an options object as a second argument to exclude a specific type.": "还可以将 options 对象作为第二个参数传递，以排除特定类型。",
        "Australia: 1 uppercase letter followed by 7 digits (e.g., 'A1234567')": "澳大利亚：1 个大写字母后跟 7 位数字（例如“A1234567”）",
        "United States: 9 digits (e.g., '123456789')": "美国：9 位数字（例如“123456789”）",
        "function is used to validate email addresses. It returns an object with two properties: \"isValid\" (boolean) and \"errorMsg\" (string). The \"errorMsg\" property will contain the error message if the email address is invalid, or it will be null if the email address is valid.": "函数用于验证电子邮件地址。它返回一个具有两个属性的对象：“isValid”（布尔值）和“errorMsg”（字符串）。如果电子邮件地址无效，则“errorMsg”属性将包含错误消息，如果电子邮件地址有效，则该属性将为 null。",
        "The": "这",
        "The function expects the input value to be passed as a string. It checks each character of the string, and if any character has a character code greater than 127 (non-ASCII), the function returns": "该函数期望将输入值作为字符串传递。它检查字符串的每个字符，如果任何字符的字符代码大于 127（非 ASCII），则函数返回",
        "The input string to check if it is a valid Base64 string.": "用于检查它是否为有效的 Base64 字符串的输入字符串。",
        "The maximum length of the surname. Default is 25.": "姓氏的最大长度。默认值为 25。",
        "[optional] - The minimum length of the username. Default is 1.": "[可选] - 用户名的最小长度。默认值为 1。",
        "If the input is not a string or an empty string, it throws an error.": "如果输入不是字符串或空字符串，则会引发错误。",
        "The function expects the input value to be passed as a string. It checks if the string is a valid Base64 string using a regular expression. If the input is not a string or an empty string, it throws an error.": "该函数期望将输入值作为字符串传递。它使用正则表达式检查字符串是否为有效的 Base64 字符串。如果输入不是字符串或空字符串，则会引发错误。",
        "'veryWeak' - Password with less than 6 characters, consisting only of numbers": "“veryWeak” - 少于 6 个字符的密码，仅由数字组成",
        "if the credit card number is valid, and": "如果信用卡号有效，以及",
        "The function expects the input value to be passed as a string representing a credit card number. It removes any non-digit characters and applies the Luhn algorithm to validate the credit card number. If the input is not a string, the function throws an error.": "该函数期望将输入值作为表示信用卡号的字符串传递。它删除任何非数字字符并应用 Luhn 算法来验证信用卡号。如果输入不是字符串，则函数将引发错误。",
        "function from 'multiform-validator'. Then, define the path to the image you want to check. Call the": "函数。然后，定义要检查的图像的路径。调用",
        "function checks if the input string is a valid date.": "函数检查输入字符串是否为有效日期。",
        "The input string to check if it is empty or contains only whitespace characters.": "用于检查输入字符串是否为空或仅包含空格字符。",
        "function checks if the input string is a valid email address. It returns": "函数检查输入字符串是否为有效的电子邮件地址。它返回",
        "Whether the password requires at least one special character": "密码是否需要至少一个特殊字符",
        "The passport number to be validated.": "要验证的护照号码。",
        "The function returns an object with two properties:": "该函数返回一个具有两个属性的对象：",
        "The function expects the input to be passed as a string.": "该函数期望将输入作为字符串传递。",
        "if the value is a valid port number (within the range 1 to 65535), and": "如果该值是有效的端口号（在 1 到 65535 范围内），并且",
        "The email address to be validated.": "要验证的电子邮件地址。",
        "'regular' - Password greater than 10 and has characters that are repeated more than 5 times in sequence": "“regular” - 密码大于 10，并且字符重复次数超过 5 次",
        "function evaluates the strength of a given password and returns the type of password strength as a string. The possible strength types are: \"veryWeak\", \"weak\", \"regular\", \"strong\", or \"veryStrong\", based on specific criteria.": "函数评估给定密码的强度，并以字符串形式返回密码强度的类型。根据特定标准，可能的强度类型为：“veryWeak”、“weak”、“regular”、“strong”或“veryStrong”。",
        "which means it won't clean the email addresses after default domains ['.br', '.io', '.pt', '.us', '.org', '.com'];. If set to": "这意味着它不会清除默认域 ['.br'， '.io'， '.pt'， '.us'， '.org'， '.com']; 之后的电子邮件地址。如果设置为",
        "Using": "用",
        "postalCode": "邮政编码",
        "The postal code to be checked for validity.": "要检查有效性的邮政编码。",
        "or not provided, it will return only the first email address found as a string.": "或未提供，它将仅返回以字符串形式找到的第一个电子邮件地址。",
        "Function is used to validate phone numbers. It returns an object with two properties: \"isValid\" (boolean) and \"errorMsg\" (string). The \"isValid\" property will be true if the phone number meets the specified criteria, and \"errorMsg\" will contain the error message if the phone number is invalid, or it will be null if the phone number is valid.": "函数用于验证电话号码。它返回一个具有两个属性的对象：“isValid”（布尔值）和“errorMsg”（字符串）。如果电话号码满足指定的条件，则“isValid”属性将为 true，如果电话号码无效，“errorMsg”将包含错误消息，如果电话号码有效，则该属性将为 null。",
        "otherwise.": "否则。",
        "[optional] - An object with the following optional properties:": "[optional] - 具有以下可选属性的对象：",
        "If no email address is found in the input text, the function will return the string 'No email found'.": "如果在输入文本中找不到电子邮件地址，该函数将返回字符串“未找到电子邮件”。",
        "function extracts email addresses from a given text. If the optional": "函数从给定文本中提取电子邮件地址。如果可选",
        "Brazil": "巴西",
        "The input value to check if it represents a valid decimal number.": "用于检查它是否表示有效的十进制数的输入值。",
        "Usage Examples": "使用示例",
        "Index 2: \"Unknown error\"": "索引 2：“未知错误”",
        "The function expects the input value to be passed as a string.": "该函数期望将输入值作为字符串传递。",
        "the function will return an array with all the email addresses found. If set to": "该函数将返回一个数组，其中包含找到的所有电子邮件地址。如果设置为",
        "The input string to check for ASCII characters.": "用于检查 ASCII 字符的输入字符串。",
        "function checks if the input value represents a valid postal code for supported countries. It returns": "函数检查输入值是否表示支持国家/地区的有效邮政编码。它返回",
        "The input string representing the credit card number to validate.": "表示要验证的信用卡号的输入字符串。",
        "method and checks if the resulting string is empty (i.e., has a length of 0). If the input string consists of only whitespace characters, the function also returns.": "方法并检查生成的字符串是否为空（即长度为 0）。如果输入字符串仅包含空格字符，则该函数也会返回。",
        "function is used to check whether an image file is valid or not. It accepts a Buffer as an argument.": "函数用于检查图像文件是否有效。它接受 Buffer 作为参数。",
        "The function expects the input value to be passed as a string or a number representing a decimal number. If the input is not a string or number, or an empty string, the function throws an error. It uses a regular expression to validate decimal numbers, supports both dot (.) and comma (,) as decimal separators, and checks for multiple decimal separators. Additionally, it performs checks for the negative sign to ensure it is only at the beginning of the value.": "该函数期望输入值作为字符串或表示十进制数的数字传递。如果输入不是字符串或数字，或者不是空字符串，则函数将引发错误。它使用正则表达式来验证十进制数，支持点（.）和逗号（，）作为小数分隔符，并检查多个小数分隔符。此外，它还会检查负号，以确保它仅在值的开头。",
        "Italy": "意大利",
        "function checks if the input string contains only ASCII characters. It returns": "函数检查输入字符串是否仅包含 ASCII 字符。它返回",
        "[optional] - The country code to check if the email ends with it. If not provided, no country code check will be performed.": "[可选] - 用于检查电子邮件是否以它结尾的国家/地区代码。如果未提供，则不会执行国家/地区代码检查。",
        "India: 1 uppercase letter followed by 7 digits (e.g., 'A1234567')": "印度：1 个大写字母后跟 7 位数字（例如“A1234567”）",
        "function checks if the input value is a valid number. It returns": "函数检查输入值是否为有效数字。它返回",
        "[optional] - An array of error messages to customize the response. If not provided, the function will use default error messages.": "[可选] - 用于自定义响应的错误消息数组。如果未提供，该函数将使用默认错误消息。",
        "'veryStrong' - Password longer than 16 characters": "“veryStrong” - 密码长度超过 16 个字符",
        "function is used to identify the credit card flag based on the first digits of the card number. It returns the name of the card flag as a string.": "函数用于根据卡号的第一位数字识别信用卡标志。它以字符串形式返回卡标志的名称。",
        "United Kingdom: 2 uppercase letters followed by 6 digits (e.g., 'AB123456')": "英国：2 个大写字母后跟 6 位数字（例如“AB123456”）",
        "How to use the isValidAudio function": "如何使用 isValidAudio 函数",
        "First, import the": "首先，导入",
        "if the image is valid and": "如果图像有效，并且",
        "[optional] The minimum length allowed for the name. Default value: 1.": "[可选]名称允许的最小长度。默认值：1。",
        "the function will remove duplicate emails from the output list. If set to": "该功能将从输出列表中删除重复的电子邮件。如果设置为",
        "as it considers such strings to be empty.": "因为它认为这些字符串是空的。",
        "Netherlands": "荷兰",
        "or not provided, it will keep the duplicate emails in the output list.": "或未提供，它将在输出列表中保留重复的电子邮件。",
        "[optional] - The maximum length of the username. Default is Infinity.": "[可选] - 用户名的最大长度。默认值为 Infinity。",
        "Germany: 2 uppercase letters followed by 8 digits (e.g., 'AB12345678')": "德国：2 个大写字母后跟 8 位数字（例如“AB12345678”）",
        "'regular' - Password greater than or equal to 6 and less than 8 characters, containing at least one number and one letter": "“regular” - 密码大于或等于 6 个且小于 8 个字符，至少包含一个数字和一个字母",
        "'veryStrong' - Password with 8 or more characters, containing at least one uppercase letter, one number, one special character and one lowercase letter": "“veryStrong” - 包含 8 个或更多字符的密码，至少包含一个大写字母、一个数字、一个特殊字符和一个小写字母",
        "Default value: false.": "默认值：false。",
        "The input textarea string to be validated.": "要验证的输入 textarea 字符串。",
        "function checks if the input string is a valid MD5 hash. It returns": "函数检查输入字符串是否为有效的 MD5 哈希。它返回",
        "if it is not.": "如果不是。",
        "Notes": "笔记",
        "Return Value": "返回值",
        "false": "假",
        "The examples provided demonstrate how to use the function with different parameters and show the expected return values.": "提供的示例演示了如何将函数与不同的参数一起使用，并显示预期的返回值。",
        "Canada: 1 uppercase letter followed by 7 digits (e.g., 'A1234567')": "加拿大：1 个大写字母后跟 7 位数字（例如“A1234567”）",
        "function is used to validate US phone numbers. It supports various formats, including \"XXX-XXX-XXXX\", \"(XXX) XXX-XXXX\", and \"1 (XXX) XXX-XXXX\". It returns an object with two properties: \"isValid\" (boolean) and \"errorMsg\" (string). The \"isValid\" property will be true if the phone number is valid, and \"errorMsg\" will contain the error message if the phone number is invalid, or it will be null if the phone number is valid.": "函数用于验证美国电话号码。它支持多种格式，包括“XXX-XXX-XXXX”、“（XXX） XXX-XXXX”和“1 （XXX） XXX-XXXX”。它返回一个具有两个属性的对象：“isValid”（布尔值）和“errorMsg”（字符串）。如果电话号码有效，则“isValid”属性将为 true，如果电话号码无效，“errorMsg”将包含错误消息，如果电话号码有效，则该属性将为 null。",
        "The function expects the credit card number to be passed as a string. It uses the first digits of the card number to identify the card flag and returns the corresponding flag name as a string. If the card flag cannot be identified or the input is not a string, it returns 'Unknown'.": "该函数要求将信用卡号作为字符串传递。它使用卡号的第一位数字来标识卡标志，并以字符串形式返回相应的标志名称。如果无法识别卡标志或输入不是字符串，则返回“未知”。",
        "function with the image path as an argument. The function will return": "函数，以图像路径为参数。函数将返回",
        "Whether the password requires at least one letter. Default value: false.": "密码是否至少需要一个字母。默认值：false。",
        "function checks if the input string or number represents a valid decimal number. It returns": "函数检查输入字符串或数字是否表示有效的十进制数。它返回",
        "'regular' - Password between 9 and 12 characters": "“regular” - 密码介于 9 到 12 个字符之间",
        "if the value matches the postal code format for any of the supported countries, and": "如果该值与任何受支持国家/地区的邮政编码格式匹配，并且",
        "The function can be imported using ES6 syntax from the \"validateBRPhoneNumber\" package:": "可以使用 ES6 语法从“validateBRPhoneNumber”包导入该函数：",
        "How to use the isValidTxt function": "如何使用 isValidTxt 函数",
        "set to": "设置为",
        "if the MAC address is valid and follows the supported formats, and": "如果 MAC 地址有效并遵循支持的格式，并且",
        "'weak' - Password that repeats the same character more than 3 times in a row and is less than 10 characters long": "“weak” - 连续重复同一字符超过 3 次且长度少于 10 个字符的密码",
        "This function is a text area validation utility that checks the validity of a given textarea string based on certain criteria.": "此函数是一个文本区域验证实用程序，它根据特定条件检查给定文本区域字符串的有效性。",
        "The minimum length of the surname. Default is 1.": "姓氏的最小长度。默认值为 1。",
        "if the input value matches any of the supported formats, and": "如果输入值与任何支持的格式匹配，以及",
        "Passing options to the": "将选项传递给",
        "The name to be validated.": "要验证的名称。",
        "function checks if the input string is a valid Brazilian ZIP Code (CEP). It returns": "函数检查输入字符串是否为有效的巴西邮政编码 （CEP）。它返回",
        "The function takes one parameter, which must be a string representing the password to be evaluated.": "该函数采用一个参数，该参数必须是表示要计算的密码的字符串。",
        "function is used to validate passwords. It returns an object with two properties: \"isValid\" (boolean) and \"errorMsg\" (string). The \"isValid\" property will be true if the password meets the specified criteria, and \"errorMsg\" will contain the error message if the password is invalid, or it will be null if the password is valid.": "函数用于验证密码。它返回一个具有两个属性的对象：“isValid”（布尔值）和“errorMsg”（字符串）。如果密码满足指定的条件，则“isValid”属性将为 true，如果密码无效，则“errorMsg”将包含错误消息，如果密码有效，则该属性将为 null。",
        "France: 2 uppercase letters followed by 7 digits (e.g., 'AB1234567')": "法国：2 个大写字母后跟 7 位数字（例如“AB1234567”）",
        "Example": "例",
        "[optional]": "[可选]",
        "the function will use a default list of valid domains. If set to": "该函数将使用有效域的默认列表。如果设置为",
        "Default list of valid domains": "有效域的默认列表",
        "The input string representing the MD5 hash to validate. The MD5 hash should be a 32-character string consisting of hexadecimal digits (0-9, A-F, a-f).": "表示要验证的 MD5 哈希的输入字符串。MD5 哈希应为由十六进制数字（0-9、A-F、a-f）组成的 32 个字符的字符串。",
        "if the email address is valid and follows the supported format, and": "如果电子邮件地址有效并遵循支持的格式，并且",
        "properties, indicating whether the CPF is valid and, in case of an error, the corresponding error message.": "属性，指示 CPF 是否有效，并在发生错误时指示相应的错误消息。",
        "function checks if the input string is empty or contains only whitespace characters. It returns": "函数检查输入字符串是否为空或仅包含空格字符。它返回",
        "The maximum length allowed for the password. Default value: Infinity.": "密码允许的最大长度。默认值：Infinity。",
        "Index 1: \"Can not be empty\"": "索引 1：“不能为空”",
        "Canada": "加拿大",
        "(optional boolean) - If set to": "（可选布尔值） - 如果设置为",
        "The input string representing the date": "表示日期的输入字符串",
        "[optional] The maximum length allowed for the name. Default value: 20.": "[可选]名称允许的最大长度。默认值：20。",
        "The credit card number for which to identify the flag based on the first digits.": "根据第一位数字识别标志的信用卡号。",
        "The phone number to be validated.": "要验证的电话号码。",
        "The maximum allowed length for the textarea.": "textarea 允许的最大长度。",
        "if the value is a valid decimal number and follows one of the supported formats, and": "如果该值是有效的十进制数，并且遵循支持的格式之一，并且",
        "South Africa": "南非",
        "The minimum length allowed for the password. Default value: 1.": "密码允许的最小长度。默认值：1。",
        "Examples": "例子",
        "Germany": "德国",
        "How to use the isValidImage function": "如何使用 isValidImage 函数",
        "Function Signature": "函数签名",
        "An array of error messages to customize the response. If not provided, the function will use default error messages.": "用于自定义响应的错误消息数组。如果未提供，该函数将使用默认错误消息。",
        "The value to be checked if it represents a valid number.": "如果该值表示有效数字，则要检查的值。",
        "The function takes one parameter, which must be a string representing the time to be checked.": "该函数采用一个参数，该参数必须是表示要检查的时间的字符串。",
        "function checks if the input string represents a valid credit card number using the Luhn algorithm. It returns": "函数使用 Luhn 算法检查输入字符串是否表示有效的信用卡号。它返回",
        "if the string is a valid Base64, and": "如果字符串是有效的 Base64，并且",
        "The username to be validated.": "要验证的用户名。",
        "'weak' - Password between 5 and 8 characters, consisting only of numbers": "“weak” - 密码介于 5 到 8 个字符之间，仅由数字组成",
        "China: 1 uppercase letter followed by 8 digits (e.g., 'A12345678')": "中国：1 个大写字母后跟 8 位数字（例如“A12345678”）",
        "Whether the password requires at least one uppercase letter. Default value: false.": "密码是否至少需要一个大写字母。默认值：false。",
        "Function Documentation": "功能文档",
        "The function expects the input value to be passed as a string. If the input is not a string, the function throws a TypeError. It removes any leading and trailing whitespace from the input string using the.": "该函数期望将输入值作为字符串传递。如果输入不是字符串，则该函数将引发 TypeError。它使用 the. 从输入字符串中删除任何前导和尾随空格。",
        "The function uses regular expressions to check the input postal code against supported 'countries' postal code formats. It returns": "该函数使用正则表达式根据支持的“国家/地区”邮政编码格式检查输入邮政编码。它返回",
        "'strong' - Password with 8 or more characters, containing at least one uppercase letter, one number and one lowercase letter": "“strong” - 包含 8 个或更多字符的密码，至少包含一个大写字母、一个数字和一个小写字母",
        "function is used to validate a Brazilian CNPJ (National Registry of Legal Entities) number. It returns an object containing the": "函数用于验证巴西 CNPJ（国家法人实体注册处）编号。它返回一个包含",
        "The value to be checked if it represents a valid port number.": "如果表示有效的端口号，则要检查的值。",
        "United Kingdom": "英国",
        "isEmail just does simple validations like checking if the string has the formatting of an email like several validators out there,": "isEmail 只是做简单的验证，比如检查字符串是否具有电子邮件的格式，就像那里的几个验证器一样，",
        "Switzerland": "瑞士",
        "if the value is a valid number, and": "如果该值是有效数字，并且",
        "Spain": "西班牙",
        "The input string representing the email address to validate.": "表示要验证的电子邮件地址的输入字符串。",
        "The function checks the length of the password and applies certain criteria to classify the password strength. The returned strength type is based on the following criteria:": "该函数检查密码的长度，并应用某些条件对密码强度进行分类。返回的强度类型基于以下条件：",
        "What is the difference between": "这两者之间有什么不一样",
        "The input string representing the MAC address to validate. The MAC address can be in the following formats: \"001A2B3C4D5E\", \"00:1A:2B:3C:4D:5E\", or \"00-1A-2B-3C-4D-5E\".": "表示要验证的 MAC 地址的输入字符串。MAC 地址可以采用以下格式：“001A2B3C4D5E”、“00：1A：2B：3C：4D：5E”或“00-1A-2B-3C-4D-5E”。",
        "function checks if the input value represents a valid time in the format \"hh:mm\" or \"hh:mm AM/PM\" or \"hh:mm:ss\" or \"hh:mm:ss AM/PM\". It returns": "函数检查输入值是否以“hh：mm”或“hh：mm AM/PM”或“hh：mm：ss”或“hh：mm：ss AM/PM”格式表示有效时间。它返回",
        "Index 0: \"This textarea is too big\"": "索引 0：“此文本区域太大”",
        "The function uses a regular expression to check if the input time string matches any of the supported time formats. It returns": "该函数使用正则表达式来检查输入时间字符串是否与任何支持的时间格式匹配。它返回",
        "[optional] - This parameter determines whether to check for specific valid email domains or not. If set to": "[可选] - 此参数确定是否检查特定的有效电子邮件域。如果设置为",
        "it will clean after default domains. If set to an array of strings, it will clean after the specified custom domains.": "它将在默认域之后进行清理。如果设置为字符串数组，它将在指定的自定义域之后进行清理。",
        "The time to be checked for validity. It must be in one of the supported formats: \"hh:mm\", \"hh:mm AM/PM\", \"hh:mm:ss\", or \"hh:mm:ss AM/PM\".": "要检查有效性的时间。它必须采用支持的格式之一：“hh：mm”、“hh：mm AM/PM”、“hh：mm：ss”或“hh：mm：ss AM/PM”。",
        "Supported Countries": "支持的国家/地区",
        "no domain check will be performed. Alternatively, you can pass an array of custom valid domains to perform the check against a specific list.": "不会执行域检查。或者，您可以传递自定义有效域数组以对特定列表执行检查。",
        "it returns an array with all the email addresses found. Otherwise, it returns only the first email address found as a string.": "它返回一个数组，其中包含找到的所有电子邮件地址。否则，它仅返回以字符串形式找到的第一个电子邮件地址。",
        "The function takes one parameter that can be either a string or a number: ": "该函数采用一个参数，该参数可以是字符串或数字：",
        "The default error messages are as follows:": "默认错误消息如下所示：",
        "How to use the isValidPdf function": "如何使用 isValidPdf 函数",
        "function is used to validate usernames. It returns an object with two properties: \"isValid\" (boolean) and \"errorMsg\" (string). The \"isValid\" property will be true if the username meets the specified criteria, and \"errorMsg\" will contain the error message if the username is invalid, or it will be null if the username is valid.": "函数用于验证用户名。它返回一个具有两个属性的对象：“isValid”（布尔值）和“errorMsg”（字符串）。如果用户名满足指定的条件，则“isValid”属性将为 true，如果用户名无效，“errorMsg”将包含错误消息，如果用户名有效，则该属性将为 null。",
        "if the string is composed of ASCII characters, and": "如果字符串由 ASCII 字符组成，并且",
        "In this example it only allocates 4 bytes for performance reasons, but you can pass the entire file.": "在此示例中，出于性能原因，它仅分配 4 个字节，但您可以传递整个文件。",
        "The Brazilian phone number to be validated.": "要验证的巴西电话号码。",
        "'weak' - Password with less than 6 characters, consisting of numbers and letters": "“weak” - 少于 6 个字符的密码，由数字和字母组成",
        "Japan": "日本",
        "function checks if the input string is a valid Base64 string. It returns": "函数检查输入字符串是否为有效的 Base64 字符串。它返回",
        "A flag to determine if the textarea is required.": "用于确定 textarea 是否为必需的标志。",
        "'strong' - Password between 13 and 16 characters": "“strong” - 密码介于 13 到 16 个字符之间",
        "(optional boolean | string[]) - Either a boolean value indicating whether to clean after default domains or an array of custom domains to clean after. Default is": "（可选 boolean | string[]） - 指示是在默认域之后进行清理还是在默认域之后进行清理的自定义域数组的布尔值。默认值为",
        "true": "真",
        "The function takes one parameter, which must be a string representing the postal code to be checked.": "该函数采用一个参数，该参数必须是表示要检查的邮政编码的字符串。",
        "function checks if the input value represents a valid port number. It returns": "函数检查输入值是否表示有效的端口号。它返回",
        "function is used to validate a Brazilian CPF (Individual Taxpayer Identification) number. It returns an object containing the": "函数用于验证巴西 CPF（个人纳税人识别）编号。它返回一个包含",
        "The function expects the input MD5 hash to be passed as a string. If the input is not a string, the function throws a TypeError. It removes leading and trailing whitespace from the input string and checks if the resulting string has a valid length (exactly 32 characters). Then, it uses a regular expression to verify if the cleaned MD5 hash consists only of hexadecimal digits. Additionally, the function checks if the MD5 hash is not a known weak hash, such as \"d41d8cd98f00b204e9800998ecf8427e\". If any of the checks fail, the function returns false; otherwise, it returns true, indicating that the input string is a valid MD5 hash.": "该函数要求输入 MD5 哈希作为字符串传递。如果输入不是字符串，则该函数将引发 TypeError。它从输入字符串中删除前导和尾随空格，并检查生成的字符串是否具有有效长度（正好为 32 个字符）。然后，它使用正则表达式来验证清理的 MD5 哈希是否仅由十六进制数字组成。此外，该函数还会检查 MD5 哈希是否不是已知的弱哈希，例如“d41d8cd98f00b204e9800998ecf8427e”。如果任何检查失败，则函数返回 false;否则，它将返回 true，指示输入字符串是有效的 MD5 哈希。",
        "if the value matches any of these formats, and": "如果该值与这些格式中的任何一种匹配，并且",
        "The function takes one parameter:": "该函数采用一个参数：",
        "The function expects the input MAC address to be passed as a string. If the input is not a string, the function throws a TypeError. It removes all non-alphanumeric characters from the input string using a regular expression and checks if the resulting string has a valid length (exactly 12 characters). Then, it uses another regular expression to verify if the cleaned MAC address matches the supported pattern. The supported pattern is a 12-character string consisting of hexadecimal digits (0-9, A-F, a-f), with optional separators (\":\", \"-\") between pairs of hexadecimal digits.": "该函数要求将输入 MAC 地址作为字符串传递。如果输入不是字符串，则该函数将引发 TypeError。它使用正则表达式从输入字符串中删除所有非字母数字字符，并检查生成的字符串是否具有有效长度（正好为 12 个字符）。然后，它使用另一个正则表达式来验证清理的 MAC 地址是否与支持的模式匹配。支持的模式是一个 12 个字符的字符串，由十六进制数字 （0-9、A-F、a-f） 组成，在十六进制数字对之间带有可选分隔符 （“：”， “-”）。",
        "function to convert the value to a floating-point number. If the conversion results in a valid number and the value is finite (not infinity or NaN), the function returns true, indicating that the input value is a valid number. Otherwise, it returns false.": "函数将值转换为浮点数。如果转换结果为有效数字，并且该值为有限（不是无穷大或 NaN），则该函数返回 true，指示输入值为有效数字。否则，它将返回 false。",
        "United States of America": "美国",
        "Function is used to validate names. It returns an object with two properties: 'isValid' (boolean) and 'errorMsg' (string). The 'errorMsg' property will contain the error message if the name is invalid, or it will be null if the name is valid.": "函数用于验证名称。它返回一个具有两个属性的对象：“isValid”（布尔值）和“errorMsg”（字符串）。如果名称无效，则“errorMsg”属性将包含错误消息，如果名称有效，则该属性将为 null。",
        "The function expects the input email to be passed as a string. If the input is not a string, it will throw an error. If the email passed is an invalid email, it will return.": "该函数要求输入电子邮件作为字符串传递。如果输入不是字符串，则会引发错误。如果传递的电子邮件是无效的电子邮件，它将返回。",
        "The function checks if the input value is not null, undefined, or a boolean type. If any of these conditions are met, the function returns false since these values cannot represent valid numbers. For all other types, the function uses the.": "该函数检查输入值是否为 null、未定义或布尔类型。如果满足这些条件中的任何一个，则该函数将返回 false，因为这些值不能表示有效数字。对于所有其他类型，该函数使用 。",
        "function is used to check whether an txt file is valid or not. It accepts a Buffer as an argument.": "函数用于检查TXT文件是否有效。它接受 Buffer 作为参数。",
        "The password to be evaluated for strength.": "要评估强度的密码。",
        "Indicates if the textarea is valid based on the given criteria.": "指示 textarea 是否基于给定条件有效。",
        "if the CEP is valid, and": "如果 CEP 有效，以及",
        "function is used to check whether an audio file is valid or not. It accepts a Buffer as an argument.": "函数用于检查音频文件是否有效。它接受 Buffer 作为参数。",
        "and": "和",
        "does not, it does complex validations and better than that, you can customize the validations passing the information in the parameters.": "没有，它会执行复杂的验证，更好的是，您可以自定义在参数中传递信息的验证。",
        "If the function is called with an invalid value for the": "如果调用函数时",
        "function is used to check whether an video file is valid or not. It accepts a Buffer as an argument.": "函数用于检查视频文件是否有效。它接受 Buffer 作为参数。",
        "France": "法国",
        "parameter is set to": "参数设置为",
        "There are two ways to import the function:": "有两种方法可以导入函数：",
        "An array of custom error messages for different validation conditions. The array should contain three elements corresponding to different error scenarios. If not provided, default error messages will be used. Default Error Messages:": "用于不同验证条件的自定义错误消息数组。数组应包含对应于不同错误场景的三个元素。如果未提供，将使用默认错误消息。默认错误消息：",
        "Italy: 1 uppercase letter followed by 7 digits (e.g., 'A1234567')": "意大利：1 个大写字母后跟 7 位数字（例如“A1234567”）",
        "The function can be imported using ES6 syntax from the \"password-strength-tester\" package:": "可以使用 ES6 语法从“password-strength-tester”包导入该函数：",
        "Types that are validated": "已验证的类型",
        "A list of custom error messages. If not provided, it uses a default list of error messages.": "自定义错误消息的列表。如果未提供，则使用默认的错误消息列表。",
        "The CNPJ number to be validate.": "要验证的 CNPJ 编号。",
        "Example Usage with Nestjs and Multer": "Nestjs 和 Multer 的用法示例",
        "properties, indicating whether the CNPJ is valid and, in case of an error, the corresponding error message.": "属性，指示 CNPJ 是否有效，并在发生错误时指示相应的错误消息。",
        "The function supports postal codes for the following countries:": "该功能支持以下国家/地区的邮政编码：",
        "function is used to check whether an pdf file is valid or not. It accepts a Buffer as an argument.": "函数用于检查PDF文件是否有效。它接受 Buffer 作为参数。"
    },
    "Header": {
        "header_docs": "文档",
        "header_already_here": "您已经在这里 （：",
        "header_title": "多形式验证器",
        "header_buy_coffee": "给我买杯咖啡？",
        "header_github": "我的 github",
        "header_home": "家",
        "header_go_home": "回家",
        "header_info": "信息"
    },
    "Footer": {
        "Services": "服务业",
        "Terms": "条款",
        "Privacy Policy": "隐私策略",
        "CopyRightMsg": "多形式验证器 © 2023 - Gabriel Logan",
        "Home": "家",
        "About": "大约"
    },
    "SidebarWrapperJs": {
        "Documentation": "文档",
        "Home": "家"
    },
    "DocumentationPython": {
        "Back to home": "返回首页",
        "Installation": "安装",
        "Install the package using pip: ": "使用 pip 安装软件包：",
        "Functions signature": "函数签名",
        "All params with default values are optional.": "所有具有默认值的参数都是可选的。",
        "Methods": "方法"
    },
    "NotFound": {
        "Msg": "无法找到此页面",
        "Status": "404"
    },
    "News": {
        "News Ad Page": "新闻广告页面",
        "News Ad Page for the Multiform Validator library.": "Multiform Validator 库的新闻广告页。"
    }
}